openapi: 3.0.0

info:
  title: Dream-tracker Habit Tracking App
  version: '2.1.0'
  description: API for a habit tracking application
  contact:
    name: API Support Team
    url: https://www.dream-tracker.com/support
    email: playfulCloud@proton.me
  x-api-id: urn:dream-tracker:habit-tracking-app:1.0
  x-audience: Public
servers:
  - url: https://localhost:8080/api

tags:
  - name: habit
  - name: view
  - name: goal
  - name: category

paths:
  /v2/habits:
    post:
      tags:
        - habit
      summary: Create a new Habit
      description: Creates a new habit based on the details provided in the request. The habit object should include essential attributes such as name, action, frequency, duration, and difficulty. This endpoint is used to initialize and save a new habit in the system.
      requestBody:
        description: Accepts a single habit object.
        required: true
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: '#/components/schemas/HabitRequest'
      responses:
        201:
          description: Habit correctly created
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/HabitResponse'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - habit
      summary: Retrieve all habits
      description: Retrieves a list of all habits stored in the database. This endpoint returns detailed information about each habit, including name, frequency, duration, and current status, to help users manage their daily routines effectively..
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/HabitResponse'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.

  /v2/habits/{habit-id}/category/{category-id}:
    put:
      tags:
        - habit
      summary: Link a category to a habit
      description: Associates a specific category with an existing habit using their respective UUIDs. This operation is used to organize habits into categories, enhancing the manageability of user habits.
      parameters:
        - in: path
          name: habit-id
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the habit.
        - in: path
          name: category-id
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the category to associate.
      responses:
        200:
          description: Category associated with habit successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HabitResponse'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v2/habits/{habit-id}:
    put:
      tags:
        - habit
      summary: Update a Specific Habit
      description: Updates the details of an existing habit based on the provided habit object, which includes attributes like name, action, frequency, duration, and difficulty. This endpoint ensures that users can modify their habits as their routines change.
      parameters:
        - in: path
          name: habit-id
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the habit.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HabitRequest'
      responses:
        200:
          description: Habit has been successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HabitResponse'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - habit
      summary: Delete a Specific Habit
      description: Removes a specific habit from the database using its unique identifier. This operation is irreversible and should be used when a habit is no longer relevant or needed.
      parameters:
        - in: path
          name: habit_id
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the habit.
      responses:
        204:
          description: Habit properly deleted
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - habit
      summary: Retrieve a specific habit
      description: Fetches detailed information about a specific habit using its unique identifier. This includes comprehensive data such as habit name, actions, frequency, and associated categories or statistics.
      parameters:
        - in: path
          name: habit_id
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the habit.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HabitResponse'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v2/habits/user:
    get:
      tags:
        - habit
      summary: Retrieve habits for a User
      description: Fetches detailed information about a specific habit using its unique identifier. This includes comprehensive data such as habit name, actions, frequency, and associated categories or statistics.
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of habits successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HabitResponse'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v2/habits/stats:
    put:
      tags:
        - habit
      summary: Mark habit as done or undone for according time interval
      description: Records a habit's completion status for a specific time interval, based on the details provided in the request. This data is used to track habit adherence and performance over time.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HabitStatsRequest'
      responses:
        200:
          description: Success
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/habits/charts/{habit-id}:
    get:
      tags:
        - habit
      summary: Fetches charts aggregated based on specific habit.
      description: Generates and retrieves visual analytics and charts based on a specific habit's performance data. This includes completion rates, frequency adherence, and trends over time, providing valuable insights into habit effectiveness and areas for improvement.
      parameters:
        - in: path
          name: habit_id
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the habit.
      responses:
        200:
          description: Habit charts successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HabitChartsResponse'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /v2/goals:
    post:
      tags:
        - goal
      summary: Creates a new Goal
      description: Creates a new goal for a user with details specified in the request body, such as goal name, description, and target date. This endpoint requires a JSON object that includes all necessary goal attributes.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoalRequest'
      responses:
        201:
          description: goal correctly created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoalResponse'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - goal
      summary: Retrieves goals for a User
      description: Fetches all goal associated with a specific user. This endpoint requires JWT send through header which include the user id needed for further computation.
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoalResponse'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/goals/{goal-id}:
    put:
      tags:
        - goal
      summary: Updates existing goal by id
      description: Updates the details of an existing goal identified by its unique ID. The request must include all goal attributes that need to be updated as a JSON object. This operation will overwrite the existing goal details with the new data provided.
      parameters:
        - in: path
          name: goal-id
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of a goal to be updated.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoalRequest'
      responses:
        200:
          description: Goal successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoalResponse'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - goal
      summary: Delete a specific goal
      description: Permanently deletes a goal identified by its unique ID from the database. This action cannot be undone. A successful deletion returns a HTTP 204 status code, indicating that the operation was successful but no content is being returned.
      parameters:
        - in: path
          name: goal-id
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the goal.
      responses:
        204:
          description: Goal properly deleted
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - goal
      summary: Retrieve specific goal
      description: Retrieves detailed information about a specific goal, identified by its unique ID. The information includes all aspects of the goal such as its name, description, progress, and associated tasks or habits.
      parameters:
        - in: path
          name: goal-id
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the goal.
      responses:
        200:
          description: Goal successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoalResponse'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/goals/habits-summary:
    post:
      tags:
        - goal
      summary: Associate habit with a goal
      description: Associates an existing habit with a specified goal by adding the habit's ID to the goal's habit list.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoalHabitSummaryAdditionRequest'
      responses:
        201:
          description: Habit added to the goal successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoalResponse'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/goals/{goal-id}/goal-charts:
    get:
      tags:
        - goal
      summary: Retrieves goal charts from specified by id goal
      description: Generates and retrieves visual charts that represent the progress and statistics of a specific goal identified by its unique ID. These charts can help visualize aspects like progress over time, goal completion rate, and other relevant analytics.
      parameters:
        - in: path
          name: goal-id
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the goal.
      responses:
        200:
          description: Goal charts successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoalResponse'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v2/categories:
    post:
      tags:
        - category
      summary: Create a new category
      description: Adds a new category to the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: The name of the category to be created.
      responses:
        201:
          description: Category created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: Bad Request - The request was invalid or cannot be served
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags:
        - category
      summary: Get all categories
      description: Retrieves a list of all categories.
      responses:
        200:
          description: An array of categories.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        500:
          description: Internal server error

  /v2/categories/{category_id}:
    get:
      tags:
        - category
      summary: Get a specific category
      parameters:
        - in: path
          name: category_id
          required: true
          schema:
            type: integer
          description: The unique identifier of the category
      description: Retrieves a category by its ID.
      responses:
        200:
          description: Details of a specific category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        404:
          description: Category not found

    put:
      tags:
        - category
      summary: Update a specific category
      description: Updates the details of an existing category.
      parameters:
        - in: path
          name: category_id
          required: true
          schema:
            type: integer
          description: The unique identifier of the category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        200:
          description: Category updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: Bad Request - The request was invalid or cannot be served
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Category not found

    delete:
      tags:
        - category
      summary: Delete a specific category
      description: Removes a category from the system.
      parameters:
        - in: path
          name: category_id
          required: true
          schema:
            type: integer
          description: The unique identifier of the category
      responses:
        204:
          description: Category deleted successfully.
        404:
          description: Category not found


  /v2/views:
    post:
      tags:
        - view
      summary: Create a new view
      description: Adds a new custom view configuration to a user's profile. This includes setting the type of view (Habit, Goal, or Category), and choosing the layout (List, Grid, Custom). The request body must provide all necessary attributes for creating this view configuration.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewRequest'
      responses:
        201:
          description: View created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewResponse'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/views/user:
    get:
      tags:
        - view
      summary: Retrieve all user-configured views
      description: Fetches a list of all custom view configurations created by the user. Each entry in the list includes details such as the view type, layout, and associated categories, goals, or habits, depending on the view type.
      responses:
        200:
          description: Views successfully retrieved
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/ViewResponse'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v2/views/{view-id}:
    get:
      tags:
        - view
      summary: Retrieve a specific view
      description: Retrieves detailed information about a specific view configuration using its unique identifier. This includes the view type, layout, and all elements associated with this view such as categories, goals, or habits.
      parameters:
        - in: path
          name: view-id
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the view
      responses:
        200:
          description: View specified by id successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewResponse'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - view
      summary: Update a specific view
      description: Updates an existing view configuration identified by its unique ID. The request should include updates to attributes such as type or layout, and can modify the associated elements like adding or removing categories, goals, or habits.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewRequest'
      responses:
        200:
          description: View updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewResponse'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - view
      summary: Delete a specific view
      description: Removes a specified view configuration from the system using its unique identifier. This operation is irreversible and should be used when a view is no longer needed.
      responses:
        204:
          description: View deleted successfully.
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/views/habit:
    post:
      tags:
        - view
      summary: Adding a habit to a view
      description: Associates a specific habit with an existing view by including the habit's unique identifier. This operation allows users to customize their views by adding specific habits they wish to track within that view.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewHabitModificationRequest'
      responses:
        201:
          description: Habit successfully added to view.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewResponse'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - view
      summary: Remove habit from view
      description:  Detaches a specific habit from a view using the habit's unique identifier. This allows for dynamic customization of views depending on the user's changing preferences or goals.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewHabitModificationRequest'
      responses:
        204:
          description: Habit successfully removed from the view.
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/views/goal:
    post:
      tags:
        - view
      summary:
      description: Incorporates a specific goal into a view by providing the goal's unique identifier. This facilitates focused tracking of goals within a user's customized view setting.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewGoalModificationRequest'
      responses:
        201:
          description: Goal successfully added to view.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewResponse'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - view
      summary: Remove goal from view
      description: Removes a specific goal from a view, using the goal's unique identifier. This operation supports users in managing and updating their views to reflect their current priorities and objectives.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewGoalModificationRequest'
      responses:
        204:
          description: Goal successfully removed from the view.
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v2/views/category:
    post:
      tags:
        - view
      summary: Adding a category to view
      description: Adds a specific category to a view, enhancing the organizational aspect of the view by grouping related habits or goals under a common category based on the category's unique identifier.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewCategoryModificationRequest'
      responses:
        201:
          description: Category successfully added to view.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViewResponse'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - view
      summary: Removes category from view
      description:  Detaches a specific category from a view using the category's unique identifier. This operation allows users to customize how they categorize and view their habits or goals within the view.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewCategoryModificationRequest'
      responses:
        204:
          description: Category successfully removed from the view.
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Habit:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: 'The unique identifier of the habit.'
          example: 1
        name:
          type: string
          example: 'Morning Run'
        action:
          type: string
          example: 'Running 5km'
        frequency:
          type: string
          enum: [ Daily, Weekly, Monthly ]
          example: 'Daily'
        duration:
          type: integer
          format: int64
          description: 'Amount of activity in specified by frequency time interval'
          example: 30
        difficulty:
          type: string
          enum: [ Easy, Medium, Hard ]
          example: 'Medium'
        status:
          type: string
          enum: [ Active, Inactive ]
          example: 'Active'
        habit_stats:
          type: array
          items:
            $ref: '#/components/schemas/HabitStats'
        habit_charts:
          $ref: '#/components/schemas/HabitCharts'
        category:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        view:
          type: array
          items:
            $ref: '#/components/schemas/View'
    HabitStats:
      type: object
      description: "This schema contains data about habit implementation status in described by date moment in time"
      required:
        - id
        - date
        - status
      properties:
        id:
          type: string
          format: uuid
          description: 'The unique identifier of the habit statistic.'
          nullable: false
        date:
          type: string
          format: date
          description: 'Date of setting habit status as done or undone in ISO 8601 format'
          nullable: false
        status:
          type: string
          enum:
            - done
            - undone
    HabitCharts:
      type: object
      description: 'This schema aggregates data from Habit and HabitStats'
      required:
        - id
        - not_completion_counts
        - completionCounts
        - frequency_adherence
        - difficulty_to_frequency_correlation
        - improvement_trend
      properties:
        id:
          type: string
          format: uuid
          nullable: false
          description: 'The unique identifier of the habit chart.'
        not_completion_counts:
          type: integer
          format: int64
          default: 0
        completionCounts:
          type: integer
          default: 0
        frequency_adherence:
          type: number
          format: float
          description: 'Percentage of adherence to the planned frequency of the habit.'
        difficulty_to_frequency_correlation:
          type: number
          format: float
          description: 'Success rate related to the difficulty level of the habit.'
        improvement_trend:
          type: string
          enum:
            - improvement
            - deterioration
            - stagnation
    HabitRequest:
      type: object
      required:
        - name
        - action
        - frequency
        - duration
        - difficulty
      properties:
        name:
          type: string
          example: 'Morning Run'
        action:
          type: string
          example: 'Running 5km'
        frequency:
          type: string
          enum: [ Daily, Weekly, Monthly ]
          example: 'Daily'
        duration:
          type: integer
          format: int64
          description: 'Amount of activity in specified by frequency time interval'
          example: 30
        difficulty:
          type: string
          enum: [ Easy, Medium, Hard ]
          example: 'Medium'
    HabitStatsRequest:
      type: object
      required:
        - habitId
        - status
      properties:
        habitId:
          type: string
          format: uuid
        status:
          type: string
          enum: [Done, Undone]
    HabitCategoryAdditionRequest:
      type: object
      required:
        - categoryId
      properties:
        categoryId:
          type: string
          format: uuid
          description: 'The unique identifier of the category'
    HabitResponse:
      type: array
      items:
        $ref: '#/components/schemas/Habit'
    HabitChartsResponse:
      type: array
      items:
        $ref: '#/components/schemas/HabitCharts'
    Goal:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: 'The unique identifier of the goal.'
        name:
          type: string
          example: 'Health Improvement'
        duration:
          type: integer
          format: int64
          description: 'Duration of the goal in days'
          example: 60
        goal_habit_summary:
          type: array
          items:
            $ref: '#/components/schemas/GoalHabitSummary'
        goal_charts:
          $ref: '#/components/schemas/GoalCharts'
        view:
          type: array
          items:
            $ref: '#/components/schemas/View'
    GoalHabitSummary:
      type: object
      description: 'This schema keeps track of habits completion from the time when habit is associated with a certain goal'
      properties:
        id:
          type: string
          format: uuid
          description: 'The unique identifier of the goal habit summary.'
        amount_to_complete:
          type: integer
          format: int64
          description: 'Number of habit_stats records marked as done to finish this part of goal'
        actual_amount:
          type: integer
          format: int64
          description: 'Number of habit_stats records marked as done from time when habit is associated with goal'
        habit:
          $ref: '#/components/schemas/Habit'
    GoalCharts:
      type: object
      description: 'This schema aggregates data from habits attached to goal and offers statistics about goal progression'
      properties:
        id:
          type: string
          format: uuid
          description: 'The unique identifier of the goal chart.'
        percent_of_completion:
          type: number
          format: float
    GoalRequest:
      type: object
      required:
        - name
        - duration
      properties:
        name:
          type: string
          example: 'Health Improvement'
        duration:
          type: integer
          format: int64
          description: 'Duration of the goal in days'
          example: 60
    GoalHabitSummaryAdditionRequest:
     type: object
     required:
       - habitId
       - amount_to_complete
     properties:
       habitId:
         type: string
         format: uuid
         description: 'The unique identifier of the habit'
       amount_to_complete:
         type: integer
         format: int64
         description: 'Integer value of habit records marked as done to complete this part of the goal'
    GoalResponse:
      type: array
      items:
        $ref: '#/components/schemas/Goal'
    View:
      type: object
      description: 'Schema which contains set of information needed to display interface'
      properties:
        id:
          type: string
          format: uuid
          description: 'The unique identifier of the view.'
        type:
          type: string
          enum: [ Habit, Goal, Category ]
          description: 'The focus of the view (habit, goal, or category).'
          example: 'Habit'
        layout:
          type: string
          enum: [ List, Grid, Custom ]
          description: 'The layout format of the view.'
          example: 'Grid'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        goals:
          type: array
          items:
            $ref: '#/components/schemas/Goal'
        habits:
          type: array
          items:
            $ref: '#/components/schemas/Habit'
    GoalChartsResponse:
      type: array
      items:
        $ref: '#/components/schemas/GoalCharts'
    ViewRequest:
      type: object
      required:
        - type
        - layout
      properties:
        type:
          type: string
          enum: [ Habit, Goal, Category ]
          description: 'The focus of the view (habit, goal, or category).'
          example: 'Habit'
        layout:
          type: string
          enum: [ List, Grid, Custom ]
          description: 'The layout format of the view.'
          example: 'Grid'
    ViewHabitModificationRequest:
      type: object
      description: 'Request schema responsible for attaching and detaching habit with the view'
      required:
        - habitId
        - viewId
      properties:
        habitId:
          type: string
          format: uuid
        viewId:
          type: string
          format: uuid
    ViewGoalModificationRequest:
      type: object
      description: 'Request schema responsible for attaching and detaching goal with the view'
      required:
        - goalId
        - viewId
      properties:
        goalId:
          type: string
          format: uuid
        viewId:
          type: string
          format: uuid
    ViewCategoryModificationRequest:
      type: object
      description: 'Request schema responsible for attaching and detaching category with the view'
      required:
        - categoryId
        - viewId
      properties:
        categoryId:
          type: string
          format: uuid
        viewId:
          type: string
          format: uuid
    ViewResponse:
      type: array
      items:
        $ref: '#/components/schemas/View'
    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: 'The unique identifier of the category.'
        name:
          type: string
          description: 'The name of the category'
          example: 'Fitness'
        view:
          type: array
          items:
            $ref: '#/components/schemas/View'
    CategoryRequest:
      type: object
      required:
        name:
          type: string
      properties:
        name:
          type: string
          description: 'The name of the category'
          example: 'Fitness'
    CategoryResponse:
      type: array
      items:
        $ref: '#/components/schemas/Category'
    Error:
      type: object
      required: [ code, message ]
      properties:
        code:
          type: integer
          format: int64
          description: "Error code representing the type of error"
        message:
          type: string
          description: "Human-readable message describing the error"
        details:
          type: string
          description: "Additional details that might help diagnose the issue"

