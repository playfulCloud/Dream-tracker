openapi: 3.0.0
info:
  title: Dream-tracker Habit Tracking App
  version: '0.1.0'
  description: API for a habit tracking application
  contact:
    name: API Support Team
    url: https://www.dream-tracker.com/support
    email: playfulCloud@proton.me
  x-api-id: urn:dream-tracker:habit-tracking-app:1.0
  x-audience: Public
servers:
  - url: https://localhost:8080/dream-tracker
tags:
  - name: habit
  - name: view
  - name: goal
  - name: category
paths:
  /v1/habits:
    post:
      tags:
        - habit
      summary: Create a new Habit
      description: Creates a new habit based on the details provided in the request. The habit object should include essential attributes such as name, action, frequency, duration, and difficulty. This endpoint is used to initialize and save a new habit in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HabitRequest'
      responses:
        201:
          description: Habit has been successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HabitResponse'
        400:
          description: The request body is missing required attributes or data format is incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - habit
      summary: Retrieve habits for a User
      description: Fetches detailed information about a specific habit using its unique identifier. This includes comprehensive data such as habit name, actions, frequency, and associated categories or statistics.
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: Page of habits successfully retrieved. Currently contains only items. Can be extended later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HabitPage'
        401:
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/habits/{habit-id}:
    put:
      tags:
        - habit
      summary: Update a Specific Habit
      description: Updates the details of an existing habit based on the provided habit object, which includes attributes like name, action, frequency, duration, and difficulty. This endpoint ensures that users can modify their habits as their routines change.
      parameters:
        - in: path
          name: habit-id
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the habit.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HabitRequest'
      responses:
        200:
          description: Habit has been successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HabitResponse'
        400:
          description: The request body is missing required attributes or data format is incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - habit
      summary: Delete a Specific Habit
      description: Removes a specific habit from the database using its unique identifier. This operation is irreversible and should be used when a habit is no longer relevant or needed.
      parameters:
        - in: path
          name: habit-id
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the habit.
      responses:
        204:
          description: Habit properly deleted
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/habits/{habit-id}/categories:
    post:
      tags:
        - habit
      summary: Link a category to a habit
      description: Associates a specific category with an existing habit using their respective UUIDs. This operation is used to organize habits into categories, enhancing the manageability of user habits.
      parameters:
        - in: path
          name: habit-id
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the habit.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HabitCategoryCreateRequest'
      responses:
        204:
          description: Category associated with habit successfully.
        400:
          description: The request body is missing required attributes or data format is incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/habits-tracking:
    post:
      tags:
        - habit
      summary: Mark habit as done or undone for according time interval
      description: Records a habit's completion status for a specific time interval, based on the details provided in the request. This data is used to track habit adherence and performance over time.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HabitTrackingRequest'
      responses:
        201:
          description: Success
        400:
          description: The request body is missing required attributes or data format is incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - habit
      summary: Retrieve habit tracking data
      description: Fetches habit tracking data for a specific habit based on the provided habit ID. This data includes completion status, frequency, and adherence over time, providing valuable insights into habit performance and user behavior.
      parameters:
        - in: query
          name: habit-id
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the habit.
      responses:
        200:
          description: Habit tracking data successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HabitTrack'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/goals:
    post:
      tags:
        - goal
      summary: Creates a new Goal
      description: Creates a new goal for a user with details specified in the request body, such as goal name, description, and target date. This endpoint requires a JSON object that includes all necessary goal attributes.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoalRequest'
      responses:
        201:
          description: goal correctly created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoalResponse'
        400:
          description: The request body is missing required attributes or data format is incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags:
        - goal
      summary: Retrieves goals for a User
      description: Fetches all goal associated with a specific user. This endpoint requires JWT send through header which include the user id needed for further computation.
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoalResponse'
        401:
          description: The request has not been applied because it lacks valid authentication credentials for the target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/goals/{goal-id}:
    put:
      tags:
        - goal
      summary: Updates existing goal by id
      description: Updates the details of an existing goal identified by its unique ID. The request must include all goal attributes that need to be updated as a JSON object. This operation will overwrite the existing goal details with the new data provided.
      parameters:
        - in: path
          name: goal-id
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of a goal to be updated.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoalRequest'
      responses:
        200:
          description: Goal successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoalResponse'
        400:
          description: The request body is missing required attributes or data format is incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - goal
      summary: Delete a specific goal
      description: Permanently deletes a goal identified by its unique ID from the database. This action cannot be undone. A successful deletion returns a HTTP 204 status code, indicating that the operation was successful but no content is being returned.
      parameters:
        - in: path
          name: goal-id
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the goal.
      responses:
        204:
          description: Goal properly deleted
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - goal
      summary: Retrieve specific goal
      description: Retrieves detailed information about a specific goal, identified by its unique ID. The information includes all aspects of the goal such as its name, description, progress, and associated tasks or habits.
      parameters:
        - in: path
          name: goal-id
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the goal.
      responses:
        200:
          description: Goal successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoalResponse'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/goals/{goal-id}/habits:
    post:
      tags:
        - goal
      summary: Associate habit with a goal
      description: Associates an existing habit with a specified goal by adding the habit's ID to the goal's habit list.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoalAssignHabitRequest'
      responses:
        204:
          description: Habit added to the goal successfully.
        400:
          description: The request body is missing required attributes or data format is incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/categories:
    post:
      tags:
        - category
      summary: Create a new category
      description: Adds a new category to the system. Categories help to organize content such as habits or goals into manageable groups. The request body must include the name of the category and optionally other attributes as defined in the CategoryRequest schema.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        201:
          description: Category created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        400:
          description: The request body is missing required attributes or data format is incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - category
      summary: Retrieve all categories.
      description: Retrieves a list of all categories configured in the system and configured by the user. This endpoint provides an overview of the available categories and their respective IDs, which can be used to manage habits and goals more effectively.
      responses:
        200:
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/categories/{category-id}:
    put:
      tags:
        - category
      summary: Update a specific category
      description: Updates an existing category identified by its unique ID. This endpoint allows for modifications to the category's name and other attributes, helping maintain relevance and accuracy of category data over time.
      parameters:
        - in: path
          name: category-id
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        200:
          description: Category updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        400:
          description: The request body is missing required attributes or data format is incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - category
      summary: Delete a specific category
      description: Removes a specific category from the system using its unique identifier. This operation is irreversible and should be used when a category is no longer relevant or required, helping to keep the category management system clean and efficient.
      parameters:
        - in: path
          name: category-id
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the category
      responses:
        204:
          description: Category deleted successfully.
        404:
          description: The server has not found anything matching the Request-URI or the resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Habit:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: 'The unique identifier of the habit.'
          example: 1
        name:
          type: string
          example: 'Morning Run'
        action:
          type: string
          example: 'Running 5km'
        frequency:
          type: string
          enum: [ Daily, Weekly, Monthly ]
          example: 'Daily'
        duration:
          type: string
          format: duration
          description: Duration of the habit specified in ISO 8601 format
          example: P30D
        difficulty:
          type: string
          enum: [ Easy, Medium, Hard ]
          example: 'Medium'
        status:
          type: string
          enum: [ Active, Inactive ]
          example: 'Active'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
    HabitTrack:
      type: object
      description: "This schema contains data about habit implementation status in described by date moment in time"
      required:
        - id
        - date
        - status
      properties:
        id:
          type: string
          format: uuid
          description: 'The unique identifier of the habit statistic.'
          nullable: false
        date:
          type: string
          format: date
          description: 'Date of setting habit status as done or undone in ISO 8601 format'
          nullable: false
        status:
          type: string
          enum:
            - Done
            - Undone
    HabitRequest:
      type: object
      required:
        - name
        - action
        - frequency
        - duration
        - difficulty
      properties:
        name:
          type: string
          example: 'Morning Run'
        action:
          type: string
          example: 'Running 5km'
        frequency:
          type: string
          enum: [ Daily, Weekly, Monthly ]
          example: 'Daily'
        duration:
          type: string
          description: Duration of the habit specified in ISO 8601 format
          example: P30D
          format: duration
        difficulty:
          type: string
          enum: [ Easy, Medium, Hard ]
          example: 'Medium'
    HabitTrackingRequest:
      type: object
      required:
        - habitId
        - status
      properties:
        habitId:
          type: string
          format: uuid
        status:
          type: string
          enum: [ Done, Undone ]
    HabitPage:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Habit'
      required:
        - items
    HabitResponse:
      type: array
      items:
        $ref: '#/components/schemas/Habit'
    Goal:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: 'The unique identifier of the goal.'
        name:
          type: string
          example: 'Health Improvement'
        duration:
          type: string
          format: duration
          description: 'Duration of the goal specified in ISO 8601 format'
          example: P30D
        habits:
          type: array
          items:
            $ref: '#/components/schemas/GoalHabit'
    GoalHabit:
      type: object
      properties:
        habitId:
          type: string
          format: uuid
          description: 'The unique identifier of the habit.'
        completionCount:
          type: integer
          format: int64
          description: 'Integer value of habit records marked as done to complete this part of the goal'
        currentCount:
          type: integer
          format: int64
          description: 'Integer value of habit records marked as done to complete this part of the goal'
    GoalRequest:
      type: object
      required:
        - name
        - duration
      properties:
        name:
          type: string
          example: 'Health Improvement'
        duration:
          type: string
          format: duration
          description: Duration of the goal specified in ISO 8601 format
          example: P3Y
    GoalAssignHabitRequest:
      type: object
      required:
        - habitId
        - completionCount
      properties:
        habitId:
          type: string
          format: uuid
          description: 'The unique identifier of the habit'
        completionCount:
          type: integer
          format: int64
          description: 'Integer value of habit records marked as done to complete this part of the goal'
    GoalResponse:
      type: array
      items:
        $ref: '#/components/schemas/Goal'
    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: 'The unique identifier of the category.'
        name:
          type: string
          description: 'The name of the category'
          example: 'Fitness'
    HabitCategoryCreateRequest:
      type: object
      required:
        - categoryId
      properties:
        categoryId:
          type: string
          format: uuid
          description: 'The unique identifier of the category.'
    CategoryRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: 'The name of the category'
          example: 'Fitness'
    CategoryResponse:
      type: array
      items:
        $ref: '#/components/schemas/Category'
    Error:
      type: object
      required: [ code, message ]
      properties:
        code:
          type: integer
          format: int64
          description: "Error code representing the type of error"
        message:
          type: string
          description: "Human-readable message describing the error"
        details:
          type: string
          description: "Additional details that might help diagnose the issue"